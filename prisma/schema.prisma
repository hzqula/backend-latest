// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  otp      OTP[]
  isVerify Boolean @default(false)

  studentID     Int? @unique
  lecturerID    Int? @unique
  coordinatorID Int? @unique

  student     Student?      @relation(fields: [studentID], references: [id], onDelete: Cascade)
  lecturer    Lecturer?     @relation(fields: [lecturerID], references: [id], onDelete: Cascade)
  coordinator Coordinator?  @relation(fields: [coordinatorID], references: [id], onDelete: Cascade)
  securityLog SecurityLog[]
}

model OTP {
  id        String   @id @default(cuid())
  code      Int
  expiresAt DateTime
  userID    Int
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Student {
  id             Int       @id @default(autoincrement())
  nim            String    @unique
  name           String
  phoneNumber    String    @map("phone_number")
  profilePicture String?   @map("profile_picture")
  user           User?
  seminars       Seminar[]
}

model Lecturer {
  id             Int     @id @default(autoincrement())
  nip            String  @unique
  name           String
  phoneNumber    String  @map("phone_number")
  profilePicture String? @map("profile_picture")
  user           User?

  seminarAdvisors  SeminarAdvisor[]
  seminarAssessors SeminarAssessor[]
  assessments      Assessment[]
}

model Coordinator {
  id             Int     @id @default(autoincrement())
  name           String
  profilePicture String? @map("profile_picture")
  user           User?
}

model Seminar {
  id        Int           @id @default(autoincrement())
  type      SeminarType
  title     String
  status    SeminarStatus @default(DRAFT)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  folderId  String?

  studentNIM String
  student    Student @relation(fields: [studentNIM], references: [nim])

  advisors    SeminarAdvisor[]
  assessors   SeminarAssessor[]
  documents   SeminarDocument[]
  assessments Assessment[]

  time DateTime?
  room String?
}

model SeminarAdvisor {
  id          Int      @id @default(autoincrement())
  seminarID   Int
  lecturerNIP String
  seminar     Seminar  @relation(fields: [seminarID], references: [id], onDelete: Cascade)
  lecturer    Lecturer @relation(fields: [lecturerNIP], references: [nip], onDelete: Cascade)
}

model SeminarAssessor {
  id          Int      @id @default(autoincrement())
  seminarID   Int
  lecturerNIP String
  seminar     Seminar  @relation(fields: [seminarID], references: [id], onDelete: Cascade)
  lecturer    Lecturer @relation(fields: [lecturerNIP], references: [nip], onDelete: Cascade)
}

model SeminarDocument {
  id           Int          @id @default(autoincrement())
  seminarID    Int
  documentType DocumentType
  fileName     String
  fileURL      String
  seminar      Seminar      @relation(fields: [seminarID], references: [id], onDelete: Cascade)
}

model Assessment {
  id           Int          @id @default(autoincrement())
  lecturerRole LecturerRole @map("lecturer_role")

  writingScore      Float?  @map("writing_score")
  presentationScore Float?  @map("presentation_score")
  titleScore        Float?  @map("title_score")
  guidanceScore     Float?  @map("guidance_score")
  finalScore        Float?  @map("final_score")
  feedback          String?

  lecturerNIP String
  seminarID   Int
  lecturer    Lecturer? @relation(fields: [lecturerNIP], references: [nip])
  seminar     Seminar   @relation(fields: [seminarID], references: [id], onDelete: Cascade)

  @@unique([seminarID, lecturerNIP])
}

enum UserRole {
  STUDENT
  LECTURER
  COORDINATOR
}

enum SeminarType {
  PROPOSAL
  HASIL
}

enum DocumentType {
  ADVISOR_AVAILABILITY
  KRS
  ADVISOR_ASSISTANCE
  SEMINAR_ATTENDANCE
  THESIS_PROPOSAL
}

enum SeminarStatus {
  DRAFT
  SUBMITTED
  SCHEDULED
  COMPLETED
}

enum LecturerRole {
  ADVISOR
  ASSESSOR
}

model SecurityLog {
  id        Int      @id @default(autoincrement())
  userId    Int? // Make this optional with the question mark
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  ipAddress String
  device    String
  createdAt DateTime @default(now())
}
