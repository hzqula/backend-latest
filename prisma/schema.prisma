// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  otp      OTP[]
  isVerify Boolean @default(false)

  studentID     Int? @unique
  lecturerID    Int? @unique
  coordinatorID Int? @unique

  student     Student?     @relation(fields: [studentID], references: [id], onDelete: Cascade)
  lecturer    Lecturer?    @relation(fields: [lecturerID], references: [id], onDelete: Cascade)
  coordinator Coordinator? @relation(fields: [coordinatorID], references: [id], onDelete: Cascade)
  securityLog SecurityLog[]
}

model OTP {
  id        String   @id @default(cuid())
  code      Int
  expiresAt DateTime
  userID    Int
  user      User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum UserRole {
  STUDENT
  LECTURER
  COORDINATOR
}

model Student {
  id             Int      @id @default(autoincrement())
  nim            String   @unique
  name           String
  phoneNumber    String   @map("phone_number")
  profilePicture String?  @map("profile_picture")
  thesis         Thesis[]
  user           User?
}

model Lecturer {
  id             Int         @id @default(autoincrement())
  nip            String      @unique
  name           String
  phoneNumber    String      @map("phone_number")
  profilePicture String?     @map("profile_picture")
  assesment      Assesment[]
  user           User?
}

model Coordinator {
  id             Int     @id @default(autoincrement())
  nip            String
  name           String
  profilePicture String? @map("profile_picture")
  user           User?
}

model Thesis {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  status      ThesisStatus

  studentID Int

  student   Student     @relation(fields: [studentID], references: [id])
  assesment Assesment[]
}

enum ThesisStatus {
  DRAFT
  SUBMITTED
  COMPLETED
  REVIEWED
}

model Assesment {
  id           Int          @id @default(autoincrement())
  lecturerRole LecturerRole @map("lecturer_role")

  writingScore      Float? @map("writing_score")
  presentationScore Float? @map("presentation_score")
  titleScore        Float? @map("title_score")
  guidanceScore     Float? @map("guidance_score")

  finalScore Float?  @map("final_score")
  feedback   String?

  Lecturer   Lecturer? @relation(fields: [lecturerId], references: [id])
  lecturerId Int?
  thesis     Thesis?   @relation(fields: [thesisId], references: [id])
  thesisId   Int?
}

enum LecturerRole {
  ADVISOR
  ASSESSOR
}

model SecurityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  ipAddress String
  device    String   // Tambahan untuk menyimpan perangkat yang digunakan
  createdAt DateTime @default(now())
}

